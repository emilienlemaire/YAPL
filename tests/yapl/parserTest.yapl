import hello::that::{that};

int name = 12;
bool name1 = true;
double name2 = -1.5;
float name3 = .5f;

int infiniteArray[3][2] = {{1, 2}, {3, 4}, {5, 6}};
int infiniteArray2[4][3][2] = {infiniteArray, infiniteArray, infiniteArray, infiniteArray};

float test = anArray[name].aMethod(12, bla, test.a);

func f1() -> void {}

func f2(int a) -> void {}

func f3(int a = 12) -> void {}

func f4(int arr[2]) -> void {}

func f5(int arr[2] = {1, 2}) -> void {}

func f6(int a, int b = 2) -> void {}

// Forbidden
//func f7(int a, int b = 2, int c) -> void {}

// OK
func f7(int a, int b = 2, int c = 3) -> void {}

struct str {
    int a;
    int b = 2;

    func addToA(int v) -> int {
        if (v < 0) {
            v = -v;
            f2(v);
        } else {
            f3(v);
        }

        for (int i in 0 ... 12) {
            v = v + i;
        }
        return a + v;
    }
}

str test = {1, 3};

// Not yet possible, should look into it
// str test1(1);
// str test2(1, 2);
